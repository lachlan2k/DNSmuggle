// Code generated by capnpc-go. DO NOT EDIT.

package request

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type SessionOpenRequest struct{ capnp.Struct }

// SessionOpenRequest_TypeID is the unique identifier for the type SessionOpenRequest.
const SessionOpenRequest_TypeID = 0xae94dc2e4ae67693

func NewSessionOpenRequest(s *capnp.Segment) (SessionOpenRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SessionOpenRequest{st}, err
}

func NewRootSessionOpenRequest(s *capnp.Segment) (SessionOpenRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SessionOpenRequest{st}, err
}

func ReadRootSessionOpenRequest(msg *capnp.Message) (SessionOpenRequest, error) {
	root, err := msg.Root()
	return SessionOpenRequest{root.Struct()}, err
}

func (s SessionOpenRequest) String() string {
	str, _ := text.Marshal(0xae94dc2e4ae67693, s.Struct)
	return str
}

func (s SessionOpenRequest) DestAddr() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s SessionOpenRequest) HasDestAddr() bool {
	return s.Struct.HasPtr(0)
}

func (s SessionOpenRequest) DestAddrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s SessionOpenRequest) SetDestAddr(v string) error {
	return s.Struct.SetText(0, v)
}

// SessionOpenRequest_List is a list of SessionOpenRequest.
type SessionOpenRequest_List = capnp.StructList[SessionOpenRequest]

// NewSessionOpenRequest creates a new list of SessionOpenRequest.
func NewSessionOpenRequest_List(s *capnp.Segment, sz int32) (SessionOpenRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SessionOpenRequest]{List: l}, err
}

// SessionOpenRequest_Future is a wrapper for a SessionOpenRequest promised by a client call.
type SessionOpenRequest_Future struct{ *capnp.Future }

func (p SessionOpenRequest_Future) Struct() (SessionOpenRequest, error) {
	s, err := p.Future.Struct()
	return SessionOpenRequest{s}, err
}

type SessionOpenResponse struct{ capnp.Struct }

// SessionOpenResponse_TypeID is the unique identifier for the type SessionOpenResponse.
const SessionOpenResponse_TypeID = 0xbce2eba747b2c4cd

func NewSessionOpenResponse(s *capnp.Segment) (SessionOpenResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return SessionOpenResponse{st}, err
}

func NewRootSessionOpenResponse(s *capnp.Segment) (SessionOpenResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return SessionOpenResponse{st}, err
}

func ReadRootSessionOpenResponse(msg *capnp.Message) (SessionOpenResponse, error) {
	root, err := msg.Root()
	return SessionOpenResponse{root.Struct()}, err
}

func (s SessionOpenResponse) String() string {
	str, _ := text.Marshal(0xbce2eba747b2c4cd, s.Struct)
	return str
}

func (s SessionOpenResponse) Status() SessionOpenResponse_Status {
	return SessionOpenResponse_Status(s.Struct.Uint16(0))
}

func (s SessionOpenResponse) SetStatus(v SessionOpenResponse_Status) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s SessionOpenResponse) Id() uint64 {
	return s.Struct.Uint64(8)
}

func (s SessionOpenResponse) SetId(v uint64) {
	s.Struct.SetUint64(8, v)
}

// SessionOpenResponse_List is a list of SessionOpenResponse.
type SessionOpenResponse_List = capnp.StructList[SessionOpenResponse]

// NewSessionOpenResponse creates a new list of SessionOpenResponse.
func NewSessionOpenResponse_List(s *capnp.Segment, sz int32) (SessionOpenResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[SessionOpenResponse]{List: l}, err
}

// SessionOpenResponse_Future is a wrapper for a SessionOpenResponse promised by a client call.
type SessionOpenResponse_Future struct{ *capnp.Future }

func (p SessionOpenResponse_Future) Struct() (SessionOpenResponse, error) {
	s, err := p.Future.Struct()
	return SessionOpenResponse{s}, err
}

type SessionOpenResponse_Status uint16

// SessionOpenResponse_Status_TypeID is the unique identifier for the type SessionOpenResponse_Status.
const SessionOpenResponse_Status_TypeID = 0xc1d309f2a122a85a

// Values of SessionOpenResponse_Status.
const (
	SessionOpenResponse_Status_ok       SessionOpenResponse_Status = 0
	SessionOpenResponse_Status_dialFail SessionOpenResponse_Status = 1
	SessionOpenResponse_Status_error    SessionOpenResponse_Status = 2
)

// String returns the enum's constant name.
func (c SessionOpenResponse_Status) String() string {
	switch c {
	case SessionOpenResponse_Status_ok:
		return "ok"
	case SessionOpenResponse_Status_dialFail:
		return "dialFail"
	case SessionOpenResponse_Status_error:
		return "error"

	default:
		return ""
	}
}

// SessionOpenResponse_StatusFromString returns the enum value with a name,
// or the zero value if there's no such value.
func SessionOpenResponse_StatusFromString(c string) SessionOpenResponse_Status {
	switch c {
	case "ok":
		return SessionOpenResponse_Status_ok
	case "dialFail":
		return SessionOpenResponse_Status_dialFail
	case "error":
		return SessionOpenResponse_Status_error

	default:
		return 0
	}
}

type SessionOpenResponse_Status_List = capnp.EnumList[SessionOpenResponse_Status]

func NewSessionOpenResponse_Status_List(s *capnp.Segment, sz int32) (SessionOpenResponse_Status_List, error) {
	return capnp.NewEnumList[SessionOpenResponse_Status](s, sz)
}

type PollRequest struct{ capnp.Struct }

// PollRequest_TypeID is the unique identifier for the type PollRequest.
const PollRequest_TypeID = 0x848acab6117f7b29

func NewPollRequest(s *capnp.Segment) (PollRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return PollRequest{st}, err
}

func NewRootPollRequest(s *capnp.Segment) (PollRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return PollRequest{st}, err
}

func ReadRootPollRequest(msg *capnp.Message) (PollRequest, error) {
	root, err := msg.Root()
	return PollRequest{root.Struct()}, err
}

func (s PollRequest) String() string {
	str, _ := text.Marshal(0x848acab6117f7b29, s.Struct)
	return str
}

func (s PollRequest) Id() uint64 {
	return s.Struct.Uint64(0)
}

func (s PollRequest) SetId(v uint64) {
	s.Struct.SetUint64(0, v)
}

// PollRequest_List is a list of PollRequest.
type PollRequest_List = capnp.StructList[PollRequest]

// NewPollRequest creates a new list of PollRequest.
func NewPollRequest_List(s *capnp.Segment, sz int32) (PollRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[PollRequest]{List: l}, err
}

// PollRequest_Future is a wrapper for a PollRequest promised by a client call.
type PollRequest_Future struct{ *capnp.Future }

func (p PollRequest_Future) Struct() (PollRequest, error) {
	s, err := p.Future.Struct()
	return PollRequest{s}, err
}

type PollResponse struct{ capnp.Struct }

// PollResponse_TypeID is the unique identifier for the type PollResponse.
const PollResponse_TypeID = 0xecd775820e016b67

func NewPollResponse(s *capnp.Segment) (PollResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return PollResponse{st}, err
}

func NewRootPollResponse(s *capnp.Segment) (PollResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return PollResponse{st}, err
}

func ReadRootPollResponse(msg *capnp.Message) (PollResponse, error) {
	root, err := msg.Root()
	return PollResponse{root.Struct()}, err
}

func (s PollResponse) String() string {
	str, _ := text.Marshal(0xecd775820e016b67, s.Struct)
	return str
}

func (s PollResponse) Status() PollResponse_Status {
	return PollResponse_Status(s.Struct.Uint16(0))
}

func (s PollResponse) SetStatus(v PollResponse_Status) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s PollResponse) Id() uint64 {
	return s.Struct.Uint64(8)
}

func (s PollResponse) SetId(v uint64) {
	s.Struct.SetUint64(8, v)
}

// PollResponse_List is a list of PollResponse.
type PollResponse_List = capnp.StructList[PollResponse]

// NewPollResponse creates a new list of PollResponse.
func NewPollResponse_List(s *capnp.Segment, sz int32) (PollResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[PollResponse]{List: l}, err
}

// PollResponse_Future is a wrapper for a PollResponse promised by a client call.
type PollResponse_Future struct{ *capnp.Future }

func (p PollResponse_Future) Struct() (PollResponse, error) {
	s, err := p.Future.Struct()
	return PollResponse{s}, err
}

type PollResponse_Status uint16

// PollResponse_Status_TypeID is the unique identifier for the type PollResponse_Status.
const PollResponse_Status_TypeID = 0x894e18178d0bcd45

// Values of PollResponse_Status.
const (
	PollResponse_Status_pollOK PollResponse_Status = 0
	PollResponse_Status_noData PollResponse_Status = 1
	PollResponse_Status_closed PollResponse_Status = 2
	PollResponse_Status_error  PollResponse_Status = 3
)

// String returns the enum's constant name.
func (c PollResponse_Status) String() string {
	switch c {
	case PollResponse_Status_pollOK:
		return "pollOK"
	case PollResponse_Status_noData:
		return "noData"
	case PollResponse_Status_closed:
		return "closed"
	case PollResponse_Status_error:
		return "error"

	default:
		return ""
	}
}

// PollResponse_StatusFromString returns the enum value with a name,
// or the zero value if there's no such value.
func PollResponse_StatusFromString(c string) PollResponse_Status {
	switch c {
	case "pollOK":
		return PollResponse_Status_pollOK
	case "noData":
		return PollResponse_Status_noData
	case "closed":
		return PollResponse_Status_closed
	case "error":
		return PollResponse_Status_error

	default:
		return 0
	}
}

type PollResponse_Status_List = capnp.EnumList[PollResponse_Status]

func NewPollResponse_Status_List(s *capnp.Segment, sz int32) (PollResponse_Status_List, error) {
	return capnp.NewEnumList[PollResponse_Status](s, sz)
}

type WriteRequest struct{ capnp.Struct }

// WriteRequest_TypeID is the unique identifier for the type WriteRequest.
const WriteRequest_TypeID = 0xeb3bcb770c8eb6be

func NewWriteRequest(s *capnp.Segment) (WriteRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return WriteRequest{st}, err
}

func NewRootWriteRequest(s *capnp.Segment) (WriteRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return WriteRequest{st}, err
}

func ReadRootWriteRequest(msg *capnp.Message) (WriteRequest, error) {
	root, err := msg.Root()
	return WriteRequest{root.Struct()}, err
}

func (s WriteRequest) String() string {
	str, _ := text.Marshal(0xeb3bcb770c8eb6be, s.Struct)
	return str
}

func (s WriteRequest) Id() uint64 {
	return s.Struct.Uint64(0)
}

func (s WriteRequest) SetId(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s WriteRequest) FragHeader() uint16 {
	return s.Struct.Uint16(8)
}

func (s WriteRequest) SetFragHeader(v uint16) {
	s.Struct.SetUint16(8, v)
}

func (s WriteRequest) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s WriteRequest) HasData() bool {
	return s.Struct.HasPtr(0)
}

func (s WriteRequest) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// WriteRequest_List is a list of WriteRequest.
type WriteRequest_List = capnp.StructList[WriteRequest]

// NewWriteRequest creates a new list of WriteRequest.
func NewWriteRequest_List(s *capnp.Segment, sz int32) (WriteRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[WriteRequest]{List: l}, err
}

// WriteRequest_Future is a wrapper for a WriteRequest promised by a client call.
type WriteRequest_Future struct{ *capnp.Future }

func (p WriteRequest_Future) Struct() (WriteRequest, error) {
	s, err := p.Future.Struct()
	return WriteRequest{s}, err
}

type WriteResponse struct{ capnp.Struct }

// WriteResponse_TypeID is the unique identifier for the type WriteResponse.
const WriteResponse_TypeID = 0xe26b313bb15c1d60

func NewWriteResponse(s *capnp.Segment) (WriteResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return WriteResponse{st}, err
}

func NewRootWriteResponse(s *capnp.Segment) (WriteResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return WriteResponse{st}, err
}

func ReadRootWriteResponse(msg *capnp.Message) (WriteResponse, error) {
	root, err := msg.Root()
	return WriteResponse{root.Struct()}, err
}

func (s WriteResponse) String() string {
	str, _ := text.Marshal(0xe26b313bb15c1d60, s.Struct)
	return str
}

func (s WriteResponse) Status() WriteResponse_Status {
	return WriteResponse_Status(s.Struct.Uint16(0))
}

func (s WriteResponse) SetStatus(v WriteResponse_Status) {
	s.Struct.SetUint16(0, uint16(v))
}

// WriteResponse_List is a list of WriteResponse.
type WriteResponse_List = capnp.StructList[WriteResponse]

// NewWriteResponse creates a new list of WriteResponse.
func NewWriteResponse_List(s *capnp.Segment, sz int32) (WriteResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[WriteResponse]{List: l}, err
}

// WriteResponse_Future is a wrapper for a WriteResponse promised by a client call.
type WriteResponse_Future struct{ *capnp.Future }

func (p WriteResponse_Future) Struct() (WriteResponse, error) {
	s, err := p.Future.Struct()
	return WriteResponse{s}, err
}

type WriteResponse_Status uint16

// WriteResponse_Status_TypeID is the unique identifier for the type WriteResponse_Status.
const WriteResponse_Status_TypeID = 0xd957c4889ecbbbe6

// Values of WriteResponse_Status.
const (
	WriteResponse_Status_writeOk WriteResponse_Status = 0
	WriteResponse_Status_closed  WriteResponse_Status = 1
	WriteResponse_Status_error   WriteResponse_Status = 2
)

// String returns the enum's constant name.
func (c WriteResponse_Status) String() string {
	switch c {
	case WriteResponse_Status_writeOk:
		return "writeOk"
	case WriteResponse_Status_closed:
		return "closed"
	case WriteResponse_Status_error:
		return "error"

	default:
		return ""
	}
}

// WriteResponse_StatusFromString returns the enum value with a name,
// or the zero value if there's no such value.
func WriteResponse_StatusFromString(c string) WriteResponse_Status {
	switch c {
	case "writeOk":
		return WriteResponse_Status_writeOk
	case "closed":
		return WriteResponse_Status_closed
	case "error":
		return WriteResponse_Status_error

	default:
		return 0
	}
}

type WriteResponse_Status_List = capnp.EnumList[WriteResponse_Status]

func NewWriteResponse_Status_List(s *capnp.Segment, sz int32) (WriteResponse_Status_List, error) {
	return capnp.NewEnumList[WriteResponse_Status](s, sz)
}

const schema_85d3acc39d94e0f8 = "x\xda\xa4\x94_H\x1cW\x14\xc6\xcf\xb9wt\x95\xee" +
	"v;\x8cE+\x88\xb6\xb4P\x0b\xae\x7f\xfb\xd0\xf5a" +
	"\xb5\xd4\xd6Z\xe9zk\x8b\xad\xb4\xd0\xa9s\xbb\xac;" +
	"\xce\xec\xce\x9d\xed>\xf4AZ*\xd4\x80y\x89yH" +
	"\xc0\x80\x81\x90\x10bB\x02\xf1%!\x10b^\">" +
	"I\x08\x09\x09\x04A!\x98\xa7<\xe5m\xc2\x9d5;" +
	"\xab.q!O\x17v\xcf\xf9\xbes~\xe7\x9c\xe9Z" +
	"\xc1\x01\xa5;2\xab\x00a}5\xb5^\xfb\xdf\xb3\xea" +
	"\xea\xbdc\xff\x01kC\xf4^>]\\\xbasis" +
	"\x0e\x94\x10@\xef'\xe4\x0f\xd4\xbe !\x00\xeds\x92" +
	"\x00\xf4\x866\xdeYhl\xfa~\x1e\xd4\x0e\xe2\xa52" +
	"\xf8\xee\xbf\xf9\x07\xcf\x01\xb0\xf7'r\x16\xb5\x19?2" +
	"MR\x80\xde\x89\xbfvFb\x8f\x17/\x83\xdaV\xa6" +
	"Z\x83Rv\x81\x9cF\xed\x9c\x1f\xbc\xec\xcbn\xac]" +
	"\xfb\xe6\xfc\xee\xd6MY\x039P\xc3]\xa9\xfc\x844" +
	"\x02h\xdb\xa4\x00\xe8M^\xf8h\xf9E\xfd\xe6mP" +
	"\xfbH\x90\x09\xd8;H\x1f\xa1\xf6\x1b\x95\xb2\xbf\xd0$" +
	"\xa0\xb7sc\xfd\xcc\xffk\x13\x0fA\x8d\x11\xef\xf7\x96" +
	"_\xaf\xf6wg\xb6dd\x8e^Dm\xde\x8f\x9c\xf3" +
	"#K\x7fV\x80p\x8a:\xa8\xadPY\xc0u*\xab" +
	"\xbd\xb5z<\\X\xef\xdf=Pm\xb1\xb7\xfbt\x1a" +
	"\xb5g\xbe\xf46\xbd\x02\x18P\xaa\xd0\xdb?\xca4j" +
	"'\x15)\xbd\xa4\x14\xa0\xc3K[.w,\xddT:" +
	"\x1d\x9e\xcbs\xe1v\xcep!\xf4\x14\x17\xb1)=k" +
	"e\xe3c\xb6i\xfe\xc0s\xf9\x10\x17\xee\x18\"S\xa8" +
	"\x02\xa0 \x80\x1ai\x06`u\x14Y\x03A\x9a6\xb0" +
	"\x1e\x08\xd6\x03\x96$k\xde,)\xb2\xb6%xl\xdc" +
	"\xd5Cn^H\xe9\xf7\x90\x00\xa8\xedq\x00D\xf5C" +
	"\xf9\x10\xf5\x03\xf9PU\xed\x01Hdm\xd3L~\x97" +
	"\xb0\xec\xaftWOL\x99\xb6\xe0F+w\x1c\xdb9" +
	"\xdas\x9c\x0b\x91\xb6\xadd\x96[\xb2\x1bN\x0fu3" +
	"\x02\xc0\xc2\x14Y\x13A\xcf\xe0\xc2\x1d4\x0c\x07\x000" +
	"\x0c\x04\xc3\xd5\xb4\xb5\xcfBd\xed\x90%8S\xb0|" +
	"\x7f0\x9e\x18wu7/X]\xc9X\xf6\xcb>\xa6" +
	"\xc8\xba\x08\xaa\x88\x0d(\x7f\xec\x90l?\xa5\xc8\xfa\x08" +
	"&\x84\x9f\x82\xd1@\x08\x10\xa3P\x11zm\xb5\xd5\xed" +
	"\xb1wi\x91}\xd8g\xdf\xd2\xec\xb3\x7f\x7f\xc4g/" +
	"\xa1S;\xe3\x19i\xdd\xfcZO\x9b\x00P-\xee\x09" +
	"'\xed\xf22\x9f\xa8\xee\xee\xf3\xf9\xb2\xe8S\x9cq\xa4" +
	"\x07`\xb6 3\x92\x99\xcacU\x8e\xf2i\xf5\x8d|" +
	"\xda\xc1\x0d\x06\xb4\xcb\xc6\x1c\x0f\x966\x00[\xca)\x82" +
	"\xad\xda7\x17\xcd\xef\x9dE\xb8\xe40$G7@\x91" +
	"\x8d\xcay*\xc5y~;\x09\xc0\x86)\xb2\x1f\x09\"" +
	"i\xf0!\xb0\xcf\x00\xd8(E\xf6\xf3\xfe\xfb\xf9\xd3\xd1" +
	"S\xc3\\7\x80r\x07C@0\x04\x185tW\xc7" +
	"\x08\x10\x8cTS\xde\xeb\x0b\x8b\x96\xa8\x04\xdf\xd1\xb7\xdc" +
	"\xc1\x92\xd0\xa1\x1d|\x15\x00\x00\xff\xfff\x10\xb3f"

func init() {
	schemas.Register(schema_85d3acc39d94e0f8,
		0x848acab6117f7b29,
		0x894e18178d0bcd45,
		0xae94dc2e4ae67693,
		0xbce2eba747b2c4cd,
		0xc1d309f2a122a85a,
		0xd957c4889ecbbbe6,
		0xe26b313bb15c1d60,
		0xeb3bcb770c8eb6be,
		0xecd775820e016b67)
}
